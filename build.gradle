plugins {
    id 'java'
    id 'edu.sc.seis.launch4j' version '1.6.1'
    id 'jacoco'
}
apply from:   'gradle/codequality.gradle'

sourceCompatibility = 1.8

ext {
    mainClass = 'com.aha.pdftools.gui.PermissionManager'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

///////////////////////////////////////////////////
// Launch4j

ext {
    jarName = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files.getSingleFile().name
}

launch4j {
    mainClassName = mainClass
    dontWrapJar = true
    jar = jarName
}

///////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies{
    compile 'com.itextpdf:itextpdf:5.4.5'
    compile 'org.bouncycastle:bcprov-jdk15on:1.50'
    compile 'com.jgoodies:jgoodies-binding:2.10.0'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'com.google.code.findbugs:jsr305:2.0.3'

    runtime 'org.slf4j:slf4j-jdk14:1.7.7'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'pl.pragmatists:JUnitParams:0.5.0'
}

///////////////////////////////////////////////////
// jacoco

jacoco {
    toolVersion = '0.7.6.201602180812'
}
jacocoTestReport.dependsOn(test)

///////////////////////////////////////////////////
// About

String gitVersion() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['describe', '--abbrev=6']
            standardOutput = os
        }
        return os.toString().trim()
    }
}

task setVersion {
    ext.version = gitVersion()
    ext.destFile = file('doc/version.rst')
    outputs.file destFile
    destFile.write('.. |version-nr| replace:: ' + version)
}

task aboutPage(type:Exec, dependsOn:setVersion) {
    ext.srcFile = 'doc/about.rst'
    ext.destFile = 'src/main/resources/com/aha/pdftools/gui/about.html'
    inputs.files srcFile, 'doc/license.rst', 'doc/about.css', 'doc/html4css1.css', 'doc/version.rst'
    outputs.file destFile

    commandLine 'rst2html', '--no-xml-declaration', '--stylesheet=doc/html4css1.css,doc/about.css', srcFile, destFile
}

processResources.dependsOn aboutPage

///////////////////////////////////////////////////
// Packaging

String manifestClassPath(FileCollection cp) {
    def cpManifest = ''
    cp.each {
        File file ->
            cpManifest += ' lib/' + file.name
    }
    return cpManifest.substring(1)
}

jar {
    manifest {
        attributes 'Version': setVersion.version
        def buildTag = System.getenv()['BUILD_TAG']
        if (buildTag != null && !buildTag.isEmpty()) {
            attributes 'Build-Tag': buildTag
        }
        attributes 'Main-Class': mainClass, 
                   'Class-Path': manifestClassPath(sourceSets.main.runtimeClasspath)
    }
}

task distZip(type: Zip, dependsOn: [setVersion, 'launch4j']) {
    description 'Bundles the project as a JVM application with libs and the launch4j .exe'
    archiveName = project.name + '-v' + setVersion.version + '.zip'
    destinationDir = buildDir
    excludes = [launch4j.xmlFileName, 'bin-launch4j', "lib/$jarName"]
    from("$buildDir/launch4j")
    into project.name
    from jar.outputs
    into project.name
}

///////////////////////////////////////////////////////
// Run Application

task run(type: JavaExec) {
    description 'Runs this project as a JVM application'
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
}

///////////////////////////////////////////////////////
// Wrapper

task wrapper(type: Wrapper) {
    description 'Updates the Gradle wrapper'
    gradleVersion = '3.3'
}
